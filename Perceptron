import numpy as np

class Perceptron:
    def __init__(self, eta=0.01, n_iter=50, random_state=1):
        self.eta = eta
        self.n_iter = n_iter
        self.random_state = random_state

    def fit(self, X, y):
        rgen = np.random.RandomState(self.random_state)
        self.w_ = rgen.normal(loc=0.0, scale=0.01, size=X.shape[1])  # Initialize weights in the size of Numpy Input Array X
        self.b_ = np.float_(0.)  # Initialize bias
        self.errors_ = []  # List to store errors

        # Training loop over epochs
        for i in range(self.n_iter):
            errors = 0
            print(f"Epoch {i+1}")
            for xi, target in zip(X, y):
                update = self.eta * (target - self.predict(xi))
                # Update weights and bias
                self.w_ += update * xi
                self.b_ += update
                errors += int(update != 0.0)
                
                # Print weights and bias after each update
                print(f"  Update: {update:.4f}, Weights: {self.w_}, Bias: {self.b_}")

            self.errors_.append(errors)
            # Print total errors after each epoch
            print(f"Total errors in this epoch: {errors}\n")
        return self

    def net_input(self, X):
        # Calculate net input
        return np.dot(X, self.w_) + self.b_

    def predict(self, X):
        # Return class label after applying the unit step function
        return np.where(self.net_input(X) >= 0.0, 1, 0)

# Example usage of Perceptron class
# Define a simple dataset
X = np.array([[1, 1], [2, 1], [2, 2], [1, 0]])
y = np.array([1, 1, 0, 0])  # Labels

# Instantiate Perceptron
perceptron = Perceptron(eta=0.1, n_iter=10, random_state=1)

# Train the Perceptron and print weights/bias at each iteration
perceptron.fit(X, y)
